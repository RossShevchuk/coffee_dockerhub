name: GithubActions_Docker
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  DockerHub:
    name: DockerHub
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - 
        name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      - 
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - 
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - 
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: cybeross/coffee-wifi:latest

  EC2:
    name: EC2
    runs-on: ubuntu-latest
    needs: DockerHub
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - 
        name: Check EC2 Instance State
        id: ec2_state
        run: |
          REGION=${{ secrets.AWS_REGION }}
          echo "Region is $aws-region"
          STATE=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --region $REGION \
            --query "Reservations[0].Instances[0].State.Name" \
            --output text)
          echo "Instance state is: $STATE"
          echo "state=$STATE" >> $GITHUB_OUTPUT

      - 
        name: Start EC2 Instance (only if stopped)
        if: steps.ec2_state.outputs.state == 'stopped'
        run: |
          REGION=${{ secrets.AWS_REGION }}
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to fully boot..."
          sleep 60  # wait a bit for the IP to be assigned

      - 
        name: Getting IP public address
        if: steps.ec2_state.outputs.state == 'running'
        run: |
          #Getting the updated IP
          IP=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --region $REGION \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          echo "EC2_IP=$IP"
      - 
        name: Build & Deploy to AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOSTNAME: $EC2_IP
          USER_NAME: ${{secrets.EC2_SSH_USERNAME}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            sudo systemctl restart docker
            sudo docker pull cybeross/coffee-wifi:latest
            sudo docker run -d -p 5000:5000 cybeross/coffee-wifi:latest
          '
          echo "The app is here: $IP:5000"
